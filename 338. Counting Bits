Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:

0 <= n <= 105
 

Follow up:

It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?
Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?


APproach :

Time complexity : O(N LogN)
space complexity : O(No.of.set bits)  only for answer 

class Solution {
public:
    vector<int> countBits(int n) {
         
         vector<int>res;
         for(int i=0;i<=n;i++)
         {
            int var=i;
            int count=0;
            while(var)
            {
                var=var&(var-1);
                count++;
            }

            res.push_back(count);

         }
         return res;
    }
};

Optimised : 

Time complexity : O(N)
Space complexity : O(N)

class Solution {
public:
    vector<int> countBits(int n) {
         
         unordered_map<int,int>mp;
         vector<int>res;
         res.push_back(0);
         mp[0]=0;
          for(int i=1;i<=n;i++)
          {
              int prev=i/2;
              if(i%2==0)
              {
                 //even
                  int setBits=mp[prev];
                  mp[i]=setBits;
                  res.push_back(setBits);
              }
              else
              {
                //odd
                 int setBits=mp[prev]+1;
               res.push_back(setBits);
               mp[i]=setBits;
              }
          }
          return res;
    }
};
